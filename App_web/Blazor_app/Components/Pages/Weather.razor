@page "/weather"
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<input class="form-control" @oninput="Input" placeholder="Filter by name..." />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in filteredForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<p role="status">Warm days count: @warmDays</p>
<button class="btn btn-primary" @onclick="() => FilterDays(15)">Filter</button>
<button class="btn btn-primary" @onclick="RestoreForecast">Restore</button>

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? originalForecasts;
    private WeatherForecast[]? filteredForecasts;
    private int warmDays = 0;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();

        originalForecasts = forecasts.ToArray();
        filteredForecasts = forecasts.ToArray(); // Initialize filteredForecasts with all forecasts
        foreach (var forecast in forecasts)
        {
            if (forecast.TemperatureC > 15)
            {
                warmDays++;
            }
        }
    }

    void FilterDays(int temp)
    {
        filteredForecasts = originalForecasts.Where(forecast => forecast.TemperatureC < temp).ToArray();      
    }

    void RestoreForecast()
    {
        filteredForecasts = originalForecasts;
    }

    void Input(ChangeEventArgs arg)
    {
        var filterText = arg.Value.ToString().ToLower();
        filteredForecasts = originalForecasts.Where(forecast => forecast.Summary.ToLower().Contains(filterText)).ToArray();
        warmDays = filteredForecasts.Count(forecast => forecast.TemperatureC > 15);
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
